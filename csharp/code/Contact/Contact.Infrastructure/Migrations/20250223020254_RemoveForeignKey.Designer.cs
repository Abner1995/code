// <auto-generated />
using System;
using Contact.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Contact.Infrastructure.Migrations
{
    [DbContext(typeof(ContactDbContexts))]
    [Migration("20250223020254_RemoveForeignKey")]
    partial class RemoveForeignKey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Contact.Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("用户ID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasComment("姓名");

                    b.HasKey("Id");

                    b.ToTable("t_contactdomainentities", null, t =>
                        {
                            t.HasComment("联系人表");
                        });
                });

            modelBuilder.Entity("Contact.Domain.Entities.Phone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("int")
                        .HasComment("联系人ID");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("联系号码");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("t_phone", null, t =>
                        {
                            t.HasComment("联系号码表");
                        });
                });

            modelBuilder.Entity("Contact.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("设备标识");

                    b.Property<DateTime>("Expiry")
                        .HasColumnType("datetime(6)")
                        .HasComment("过期时间");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("Token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("t_refreshtoken", null, t =>
                        {
                            t.HasComment("用户RefreshToken");
                        });
                });

            modelBuilder.Entity("Contact.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext")
                        .HasComment("头像");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<string>("PassWord")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasComment("密码");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("更新时间");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)")
                        .HasComment("用户名");

                    b.HasKey("Id");

                    b.ToTable("t_user", null, t =>
                        {
                            t.HasComment("用户表");
                        });
                });

            modelBuilder.Entity("Contact.Domain.Entities.Phone", b =>
                {
                    b.HasOne("Contact.Domain.Entities.Contact", null)
                        .WithMany("Phones")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contact.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Contact.Domain.Entities.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Contact.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Contact.Domain.Entities.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
